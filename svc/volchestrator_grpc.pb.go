// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VolchestratorClient is the client API for Volchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolchestratorClient interface {
	Register(ctx context.Context, in *RegisterMessage, opts ...grpc.CallOption) (*Empty, error)
	Deregister(ctx context.Context, in *DeregisterMessage, opts ...grpc.CallOption) (*Empty, error)
	Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	WatchNotifications(ctx context.Context, in *NotificationWatchMessage, opts ...grpc.CallOption) (Volchestrator_WatchNotificationsClient, error)
	Acknowledge(ctx context.Context, in *Acknowledgement, opts ...grpc.CallOption) (*Empty, error)
	SubmitLeaseRequest(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*Empty, error)
}

type volchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewVolchestratorClient(cc grpc.ClientConnInterface) VolchestratorClient {
	return &volchestratorClient{cc}
}

func (c *volchestratorClient) Register(ctx context.Context, in *RegisterMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) Deregister(ctx context.Context, in *DeregisterMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) WatchNotifications(ctx context.Context, in *NotificationWatchMessage, opts ...grpc.CallOption) (Volchestrator_WatchNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Volchestrator_ServiceDesc.Streams[0], "/volchestrator.Volchestrator/WatchNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &volchestratorWatchNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Volchestrator_WatchNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type volchestratorWatchNotificationsClient struct {
	grpc.ClientStream
}

func (x *volchestratorWatchNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volchestratorClient) Acknowledge(ctx context.Context, in *Acknowledgement, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Acknowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) SubmitLeaseRequest(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/SubmitLeaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolchestratorServer is the server API for Volchestrator service.
// All implementations must embed UnimplementedVolchestratorServer
// for forward compatibility
type VolchestratorServer interface {
	Register(context.Context, *RegisterMessage) (*Empty, error)
	Deregister(context.Context, *DeregisterMessage) (*Empty, error)
	Heartbeat(context.Context, *HeartbeatMessage) (*HeartbeatResponse, error)
	WatchNotifications(*NotificationWatchMessage, Volchestrator_WatchNotificationsServer) error
	Acknowledge(context.Context, *Acknowledgement) (*Empty, error)
	SubmitLeaseRequest(context.Context, *LeaseRequest) (*Empty, error)
	mustEmbedUnimplementedVolchestratorServer()
}

// UnimplementedVolchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedVolchestratorServer struct {
}

func (UnimplementedVolchestratorServer) Register(context.Context, *RegisterMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVolchestratorServer) Deregister(context.Context, *DeregisterMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedVolchestratorServer) Heartbeat(context.Context, *HeartbeatMessage) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedVolchestratorServer) WatchNotifications(*NotificationWatchMessage, Volchestrator_WatchNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchNotifications not implemented")
}
func (UnimplementedVolchestratorServer) Acknowledge(context.Context, *Acknowledgement) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (UnimplementedVolchestratorServer) SubmitLeaseRequest(context.Context, *LeaseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLeaseRequest not implemented")
}
func (UnimplementedVolchestratorServer) mustEmbedUnimplementedVolchestratorServer() {}

// UnsafeVolchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolchestratorServer will
// result in compilation errors.
type UnsafeVolchestratorServer interface {
	mustEmbedUnimplementedVolchestratorServer()
}

func RegisterVolchestratorServer(s grpc.ServiceRegistrar, srv VolchestratorServer) {
	s.RegisterService(&Volchestrator_ServiceDesc, srv)
}

func _Volchestrator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Register(ctx, req.(*RegisterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Deregister(ctx, req.(*DeregisterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Heartbeat(ctx, req.(*HeartbeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_WatchNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationWatchMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolchestratorServer).WatchNotifications(m, &volchestratorWatchNotificationsServer{stream})
}

type Volchestrator_WatchNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type volchestratorWatchNotificationsServer struct {
	grpc.ServerStream
}

func (x *volchestratorWatchNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Volchestrator_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Acknowledgement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Acknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Acknowledge(ctx, req.(*Acknowledgement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_SubmitLeaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).SubmitLeaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/SubmitLeaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).SubmitLeaseRequest(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Volchestrator_ServiceDesc is the grpc.ServiceDesc for Volchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "volchestrator.Volchestrator",
	HandlerType: (*VolchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Volchestrator_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Volchestrator_Deregister_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Volchestrator_Heartbeat_Handler,
		},
		{
			MethodName: "Acknowledge",
			Handler:    _Volchestrator_Acknowledge_Handler,
		},
		{
			MethodName: "SubmitLeaseRequest",
			Handler:    _Volchestrator_SubmitLeaseRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNotifications",
			Handler:       _Volchestrator_WatchNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc/volchestrator.proto",
}

// VolchestratorAdminClient is the client API for VolchestratorAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolchestratorAdminClient interface {
	ListClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientList, error)
	GetVolume(ctx context.Context, in *VolumeID, opts ...grpc.CallOption) (*Volume, error)
	ListVolumes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VolumeList, error)
	AddVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Volume, error)
	UpdateVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Volume, error)
	DeleteVolume(ctx context.Context, in *VolumeID, opts ...grpc.CallOption) (*Empty, error)
	ListLeases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaseList, error)
}

type volchestratorAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewVolchestratorAdminClient(cc grpc.ClientConnInterface) VolchestratorAdminClient {
	return &volchestratorAdminClient{cc}
}

func (c *volchestratorAdminClient) ListClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) GetVolume(ctx context.Context, in *VolumeID, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) ListVolumes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VolumeList, error) {
	out := new(VolumeList)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) AddVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/AddVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) UpdateVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/UpdateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) DeleteVolume(ctx context.Context, in *VolumeID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorAdminClient) ListLeases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaseList, error) {
	out := new(LeaseList)
	err := c.cc.Invoke(ctx, "/volchestrator.VolchestratorAdmin/ListLeases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolchestratorAdminServer is the server API for VolchestratorAdmin service.
// All implementations must embed UnimplementedVolchestratorAdminServer
// for forward compatibility
type VolchestratorAdminServer interface {
	ListClients(context.Context, *Empty) (*ClientList, error)
	GetVolume(context.Context, *VolumeID) (*Volume, error)
	ListVolumes(context.Context, *Empty) (*VolumeList, error)
	AddVolume(context.Context, *Volume) (*Volume, error)
	UpdateVolume(context.Context, *Volume) (*Volume, error)
	DeleteVolume(context.Context, *VolumeID) (*Empty, error)
	ListLeases(context.Context, *Empty) (*LeaseList, error)
	mustEmbedUnimplementedVolchestratorAdminServer()
}

// UnimplementedVolchestratorAdminServer must be embedded to have forward compatible implementations.
type UnimplementedVolchestratorAdminServer struct {
}

func (UnimplementedVolchestratorAdminServer) ListClients(context.Context, *Empty) (*ClientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedVolchestratorAdminServer) GetVolume(context.Context, *VolumeID) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedVolchestratorAdminServer) ListVolumes(context.Context, *Empty) (*VolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedVolchestratorAdminServer) AddVolume(context.Context, *Volume) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVolume not implemented")
}
func (UnimplementedVolchestratorAdminServer) UpdateVolume(context.Context, *Volume) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (UnimplementedVolchestratorAdminServer) DeleteVolume(context.Context, *VolumeID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedVolchestratorAdminServer) ListLeases(context.Context, *Empty) (*LeaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeases not implemented")
}
func (UnimplementedVolchestratorAdminServer) mustEmbedUnimplementedVolchestratorAdminServer() {}

// UnsafeVolchestratorAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolchestratorAdminServer will
// result in compilation errors.
type UnsafeVolchestratorAdminServer interface {
	mustEmbedUnimplementedVolchestratorAdminServer()
}

func RegisterVolchestratorAdminServer(s grpc.ServiceRegistrar, srv VolchestratorAdminServer) {
	s.RegisterService(&VolchestratorAdmin_ServiceDesc, srv)
}

func _VolchestratorAdmin_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).ListClients(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).GetVolume(ctx, req.(*VolumeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).ListVolumes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_AddVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Volume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).AddVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/AddVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).AddVolume(ctx, req.(*Volume))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Volume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/UpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).UpdateVolume(ctx, req.(*Volume))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).DeleteVolume(ctx, req.(*VolumeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolchestratorAdmin_ListLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorAdminServer).ListLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.VolchestratorAdmin/ListLeases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorAdminServer).ListLeases(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VolchestratorAdmin_ServiceDesc is the grpc.ServiceDesc for VolchestratorAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolchestratorAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "volchestrator.VolchestratorAdmin",
	HandlerType: (*VolchestratorAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClients",
			Handler:    _VolchestratorAdmin_ListClients_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _VolchestratorAdmin_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _VolchestratorAdmin_ListVolumes_Handler,
		},
		{
			MethodName: "AddVolume",
			Handler:    _VolchestratorAdmin_AddVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _VolchestratorAdmin_UpdateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _VolchestratorAdmin_DeleteVolume_Handler,
		},
		{
			MethodName: "ListLeases",
			Handler:    _VolchestratorAdmin_ListLeases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/volchestrator.proto",
}
