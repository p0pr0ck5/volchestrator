// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VolchestratorClient is the client API for Volchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolchestratorClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	WatchNotifications(ctx context.Context, in *WatchNotificationsRequest, opts ...grpc.CallOption) (Volchestrator_WatchNotificationsClient, error)
}

type volchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewVolchestratorClient(cc grpc.ClientConnInterface) VolchestratorClient {
	return &volchestratorClient{cc}
}

func (c *volchestratorClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/volchestrator.Volchestrator/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volchestratorClient) WatchNotifications(ctx context.Context, in *WatchNotificationsRequest, opts ...grpc.CallOption) (Volchestrator_WatchNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Volchestrator_ServiceDesc.Streams[0], "/volchestrator.Volchestrator/WatchNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &volchestratorWatchNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Volchestrator_WatchNotificationsClient interface {
	Recv() (*WatchNotificationsResponse, error)
	grpc.ClientStream
}

type volchestratorWatchNotificationsClient struct {
	grpc.ClientStream
}

func (x *volchestratorWatchNotificationsClient) Recv() (*WatchNotificationsResponse, error) {
	m := new(WatchNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VolchestratorServer is the server API for Volchestrator service.
// All implementations must embed UnimplementedVolchestratorServer
// for forward compatibility
type VolchestratorServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	WatchNotifications(*WatchNotificationsRequest, Volchestrator_WatchNotificationsServer) error
	mustEmbedUnimplementedVolchestratorServer()
}

// UnimplementedVolchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedVolchestratorServer struct {
}

func (UnimplementedVolchestratorServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVolchestratorServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedVolchestratorServer) WatchNotifications(*WatchNotificationsRequest, Volchestrator_WatchNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchNotifications not implemented")
}
func (UnimplementedVolchestratorServer) mustEmbedUnimplementedVolchestratorServer() {}

// UnsafeVolchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolchestratorServer will
// result in compilation errors.
type UnsafeVolchestratorServer interface {
	mustEmbedUnimplementedVolchestratorServer()
}

func RegisterVolchestratorServer(s grpc.ServiceRegistrar, srv VolchestratorServer) {
	s.RegisterService(&Volchestrator_ServiceDesc, srv)
}

func _Volchestrator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolchestratorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volchestrator.Volchestrator/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolchestratorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volchestrator_WatchNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolchestratorServer).WatchNotifications(m, &volchestratorWatchNotificationsServer{stream})
}

type Volchestrator_WatchNotificationsServer interface {
	Send(*WatchNotificationsResponse) error
	grpc.ServerStream
}

type volchestratorWatchNotificationsServer struct {
	grpc.ServerStream
}

func (x *volchestratorWatchNotificationsServer) Send(m *WatchNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Volchestrator_ServiceDesc is the grpc.ServiceDesc for Volchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "volchestrator.Volchestrator",
	HandlerType: (*VolchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Volchestrator_Register_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Volchestrator_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNotifications",
			Handler:       _Volchestrator_WatchNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc/volchestrator.proto",
}
