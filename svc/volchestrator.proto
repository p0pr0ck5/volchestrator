syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/p0pr0ck5/volchestrator/svc";

package volchestrator;

enum NotificationType {
  LeaseAvailable = 0;
}

message RegisterMessage {
  string id = 1;
}

message HeartbeatMessage {
  string id = 1;
}

message HeartbeatResponse {
  string id = 1;
}

message LeaseRequest {
  string clientId = 1;
  string tag = 2;
  string availabilityZone = 3;
}

message NotificationWatchMessage {
  string id = 1;
}

message Notification {
  string id = 1;
  NotificationType type = 2;
  string message = 3;
}

service Volchestrator {
  rpc Register(RegisterMessage) returns (Empty) {}
  rpc Heartbeat(HeartbeatMessage) returns (HeartbeatResponse) {}

  rpc WatchNotifications(NotificationWatchMessage) returns (stream Notification) {}

  rpc SubmitLeaseRequest(LeaseRequest) returns (Empty) {}
}

enum ClientStatus {
  CLIENTUNKNOWN = 0;
  CLIENTALIVE = 1;
  CLIENTDEAD = 2;
  CLIENTLEFT = 3;
}

message ClientInfo {
  string id = 1;
  ClientStatus clientStatus = 2;
  google.protobuf.Timestamp firstSeen = 3;
  google.protobuf.Timestamp lastSeen = 4;
}

message ClientList {
  repeated ClientInfo info = 1;
}

message Empty {}

enum VolumeStatus {
  VOLUMEUNKNOWN = 0;
  VOLUMEAVAILABLE = 1;
  VOLUMELEASEPENDING = 2;
  VOLUMELEASED = 3;
}

message VolumeID {
  string id = 1;
}

message Volume {
  string id = 1;
  repeated string tags = 2;
  string availabilityZone = 3;
  VolumeStatus status = 4;
}

message VolumeList {
  repeated Volume volumes = 1;
}

service VolchestratorAdmin {
  rpc ListClients(Empty) returns (ClientList) {}

  rpc GetVolume(VolumeID) returns (Volume) {}
  rpc ListVolumes(Empty) returns (VolumeList) {}
  rpc AddVolume(Volume) returns (Volume) {}
  rpc UpdateVolume(Volume) returns (Volume) {}
  rpc DeleteVolume(VolumeID) returns (Empty) {}
}